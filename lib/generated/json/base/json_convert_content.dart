// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:rosa/model/homeBean.dart';
import 'package:rosa/generated/json/homeBean_helper.dart';
import 'package:rosa/model/index_bean_entity.dart';
import 'package:rosa/generated/json/index_bean_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case HomeBeanEntity:
			return homeBeanEntityFromJson(data as HomeBeanEntity, json) as T;			case HomeBeanResult:
			return homeBeanResultFromJson(data as HomeBeanResult, json) as T;			case IndexBeanEntity:
			return indexBeanEntityFromJson(data as IndexBeanEntity, json) as T;			case IndexBeanResult:
			return indexBeanResultFromJson(data as IndexBeanResult, json) as T;			case IndexBeanResultAdPic:
			return indexBeanResultAdPicFromJson(data as IndexBeanResultAdPic, json) as T;			case IndexBeanResultBestGood:
			return indexBeanResultBestGoodFromJson(data as IndexBeanResultBestGood, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case HomeBeanEntity:
			return homeBeanEntityToJson(data as HomeBeanEntity);			case HomeBeanResult:
			return homeBeanResultToJson(data as HomeBeanResult);			case IndexBeanEntity:
			return indexBeanEntityToJson(data as IndexBeanEntity);			case IndexBeanResult:
			return indexBeanResultToJson(data as IndexBeanResult);			case IndexBeanResultAdPic:
			return indexBeanResultAdPicToJson(data as IndexBeanResultAdPic);			case IndexBeanResultBestGood:
			return indexBeanResultBestGoodToJson(data as IndexBeanResultBestGood);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'HomeBeanEntity':
			return HomeBeanEntity().fromJson(json);			case 'HomeBeanResult':
			return HomeBeanResult().fromJson(json);			case 'IndexBeanEntity':
			return IndexBeanEntity().fromJson(json);			case 'IndexBeanResult':
			return IndexBeanResult().fromJson(json);			case 'IndexBeanResultAdPic':
			return IndexBeanResultAdPic().fromJson(json);			case 'IndexBeanResultBestGood':
			return IndexBeanResultBestGood().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'HomeBeanEntity':
			return List<HomeBeanEntity>();			case 'HomeBeanResult':
			return List<HomeBeanResult>();			case 'IndexBeanEntity':
			return List<IndexBeanEntity>();			case 'IndexBeanResult':
			return List<IndexBeanResult>();			case 'IndexBeanResultAdPic':
			return List<IndexBeanResultAdPic>();			case 'IndexBeanResultBestGood':
			return List<IndexBeanResultBestGood>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}